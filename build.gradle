plugins {
    id 'java-library'
    id 'maven-publish'
}

allprojects {
    apply plugin: "java-library"
    apply plugin: "maven-publish"

    version = project.api_version + (System.getenv("CI") ? ("-" + System.getenv("GITHUB_SHA").substring(0, 8)) : "")

    group = project.maven_group

    configurations {
        library
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Quantum'
            url = 'https://maven.quantumclient.org/snapshots'
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }


    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
                artifact sourcesJar

            }
        }

        repositories {
            maven {
                name "Quantum-snapshots"
                url "https://maven.quantumclient.org/snapshots"
                credentials {
                    username = System.getenv('MAVEN_USERNAME')
                    password = System.getenv('MAVEN_PASSWORD')
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
            maven {
                name "Quantum-releases"
                url "https://maven.quantumclient.org/releases"
                credentials {
                    username = System.getenv('MAVEN_USERNAME')
                    password = System.getenv('MAVEN_PASSWORD')
                }
                authentication {
                    basic(BasicAuthentication)
                }
                ext.releases = true
            }
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/UtilityMods/FriendAPI")
                credentials {
                    username = System.getenv("GH_USERNAME")
                    password = System.getenv("GH_TOKEN")
                }
                ext.releases = true
            }

        }
    }

    afterEvaluate {
        tasks.withType(PublishToMavenRepository).all { publishTask ->
            publishTask.onlyIf { task ->
                if (task.repository.hasProperty('releases') && !project.hasProperty("isRelase")) {
                    task.enabled = false
                    task.group = null
                    return false
                }
                return true
            }
        }
    }

    jar {
        from {
            configurations.library.collect {
                it.isDirectory() ? it :  zipTree(it)
            }
        }
    }

}

task buildAll(group: 'build') {
    subprojects.forEach {
        buildAll.dependsOn(it.tasks.sourcesJar)
        buildAll.dependsOn(it.tasks.build)
    }
}

task publishAll(group: 'publishing') {
    subprojects.forEach(p -> publishAll.dependsOn(p.tasks.publish))
}
